apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'js'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '0.1-SNAPSHOT'
mainClassName = 'io.divolte.server.Server'

applicationDefaultJvmArgs = ["-XX:+UseG1GC"]

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'com.eriwen', name: 'gradle-js-plugin', version: '1.12.1'
    }
}

dependencies {
    compile group: 'io.undertow', name: 'undertow-core', version: '1.0.15.Final'
    compile group: 'com.typesafe', name: 'config', version: '1.2.1'
    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
    compile group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.0'
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'
    compile group: 'org.apache.hadoop', name:'hadoop-client', version: '2.4.1'
    compile group: 'net.sf.uadetector', name: 'uadetector-core', version: '0.9.19'
    compile group: 'net.sf.uadetector', name: 'uadetector-resources', version: '2014.07'
    compile (group: 'com.maxmind.geoip2', name: 'geoip2', version:'0.8.0') {
        // We only use DB mode, and Google's HTTP client pulls in Apache HTTP
        // client which conflicts with the version via Hadoop.
        exclude group: 'com.google.http-client', module: 'google-http-client'
    }
    compile group: 'org.apache.kafka', name:'kafka_2.10', version:'0.8.1.1'

    // We use the SLF4J API. At runtime, this is LogBack.
    // (We also force any dependencies that use Log4J to go via SLF4J.)
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    runtime group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.7'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testCompile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.3.20'
    testCompile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: '2.4.2'
}

configurations {
    // Exclude all traces of Log4J via transitive dependencies.
    // (At runtime these are redirected over SLF4J.)
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

sourceSets {
    main {
        output.dir("${buildDir}/generated-resources/javascript", builtBy: 'minifyJs')
    }
}

javascript.source {
    dev {
        js {
            srcDir 'src/main/javascript'
            include 'dvt.js'
        }
    }
}

minifyJs {
    source = javascript.source.dev.js.files
    dest = file("${buildDir}/generated-resources/javascript/static/dvt.js")
    sourceMap = file("${buildDir}/generated-resources/javascript/static/dvt.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
        compilationLevel = 'ADVANCED_OPTIMIZATIONS'
    }
}

findbugs {
    toolVersion = "3.0.0"
}

pmd {
    toolVersion = "5.1.2"
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

// For now we prefer to have a HTML report instead of XML.
findbugsMain.reports {
    xml.enabled = false
    html.enabled = true
}
findbugsTest.reports {
    xml.enabled = false
    html.enabled = true
}
