/*
 * Copyright 2014 GoDataDriven B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'groovy'

defaultTasks 'clean', 'build'

group   = 'io.divolte'
version = '0.2-SNAPSHOT'

sourceCompatibility = 1.8
mainClassName = 'io.divolte.server.Server'
applicationName = 'divolte-collector'
applicationDefaultJvmArgs = [
        "-XX:+UseG1GC",
        "-Djava.awt.headless=true"
]

// This applies to all JavaCompile tasks, not just :compileJava
// (which is the delegate for compileJava {}).
tasks.withType(JavaCompile) {
    // All our files are UTF-8 encoded.
    options.encoding = 'UTF-8'

    // Log details about usage of deprecated symbols.
    options.deprecation = true
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repository-saucelabs.forge.cloudbees.com/release'
    }
    maven {
        url 'http://repository.codehaus.org/'
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '1.1.1'
    }
}

dependencies {
    compile group: 'io.divolte', name: 'divolte-schema', version: '0.1'
    compile group: 'io.undertow', name: 'undertow-core', version: '1.0.16.Final'
    compile group: 'com.typesafe', name: 'config', version: '1.2.1'
    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'
    compile (group: 'org.apache.hadoop', name:'hadoop-common', version: '2.4.1') {
        exclude group: 'jline', module: 'jline'
    }
    compile group: 'org.apache.hadoop', name:'hadoop-hdfs', version: '2.4.1'
    compile (group: 'net.sf.uadetector', name: 'uadetector-core', version: '0.9.21') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    compile group: 'net.sf.uadetector', name: 'uadetector-resources', version: '2014.09'
    compile (group: 'com.maxmind.geoip2', name: 'geoip2', version:'0.8.1') {
        // We only use DB mode, and Google's HTTP client pulls in Apache HTTP
        // client which conflicts with the version via Hadoop.
        exclude group: 'com.google.http-client', module: 'google-http-client'
    }
    compile group: 'org.apache.kafka', name:'kafka_2.10', version:'0.8.1.1'

    compile group: 'com.google.javascript', name:'closure-compiler', version:'v20140814'

    compile group: 'org.codehaus.groovy', name:'groovy', version: '2.3.8', classifier: 'indy'

    // We use the SLF4J API. At runtime, this is LogBack.
    // (We also force any dependencies that use Log4J to go via SLF4J.)
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    runtime group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.7'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testCompile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.3.20'
    testCompile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: '2.4.2'
    testCompile group: 'com.saucelabs', name:'sauce_junit', version: '2.1.3'
    testCompile group: 'org.seleniumhq.selenium', name:'selenium-java', version: '2.42.2'
    testCompile group: 'com.github.detro.ghostdriver', name: 'phantomjsdriver', version: '1.0.4'
}

configurations {
    // Exclude all traces of Log4J via transitive dependencies.
    // (At runtime these are redirected over SLF4J.)
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(FindBugs) {
    classes = classes.filter {
        !it.path.contains("io/divolte/groovyscript/")
    }
}

findbugs {
    toolVersion = "3.0.0"
}

pmd {
    toolVersion = "5.1.3"
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

findbugsMain.reports {
    xml.enabled = true
    html.enabled = false
}
findbugsTest.reports {
    xml.enabled = true
    html.enabled = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

/*
 * This only applies to running with gradle run. We use a different run
 * script when creating a distribution.
 */
run {
    if (System.getenv().containsKey("HADOOP_CONF_DIR")) {
        classpath += files(System.getenv("HADOOP_CONF_DIR"))
    }
    if (System.getenv().containsKey("YARN_CONF_DIR")) {
        classpath += files(System.getenv("YARN_CONF_DIR"))
    }
}

/*
 * Build distribution .tar.gz or .zip. We don't use the distribution
 * plugin as that allows for less flexibility in laying out the
 * archive. It also conflicts in non-trivial ways with the application
 * plugin (or the other way around).
 */
def distributionLayout = {
    def baseDir = archiveName - (".${extension}")

    into("${baseDir}/lib/") {
        from project.configurations.runtime
    }
    into("${baseDir}/lib/") {
        from(project.buildDir.path + "/libs") {
            include "**/*.jar"
        }
    }

    into("${baseDir}/conf/") {
        from("src/dist/conf") {
            include "**/*"
        }
        // Use the reference.conf as a example application.conf
        from("src/main/resources/reference.conf") {
            rename("reference.conf", "divolte-collector.conf.example")
        }
    }

    into("${baseDir}/bin/") {
        from("src/scripts") {
            include "**/*"
        }
    }
}

task tarball(dependsOn: build, type: Tar) {
    compression = Compression.GZIP
    extension = "tar.gz"

    configure distributionLayout
}

task zip(dependsOn: build, type: Zip) {
    configure distributionLayout
}


/*
 * Generate Sphinx documentation
 */
task processUserDoc {
    ext.source = file("docs")
    ext.sphinxDir = new File(buildDir, "sphinx")
    inputs.dir source
    outputs.dir sphinxDir
}

import org.apache.tools.ant.filters.ReplaceTokens

processUserDoc << {
    // Copy/replace @version@
    copy {
        from(source) {
            filter(ReplaceTokens, tokens: ["version": version])
        }
        into sphinxDir
        exclude "**/*.png"
    }
    // Copy images (no replacement)
    copy {
        from(source)
        into sphinxDir
        include "**/*.png"
    }
}

task userDoc(dependsOn: processUserDoc, type: Exec) {
    ext.sphinxDir = processUserDoc.sphinxDir
    ext.htmlDocDir = new File(buildDir, "userdoc/html")
    inputs.dir sphinxDir
    outputs.dir htmlDocDir

    workingDir sphinxDir

    executable "sphinx-build"
    args '-b', 'html', sphinxDir, htmlDocDir
}
