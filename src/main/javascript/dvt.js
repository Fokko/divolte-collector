/**
 * Divolte JavaScript Library
 * http://github.com/divolte/divolte
 *
 * @license Copyright 2014 GoDataDriven.
 * Released under the Apache License, Version 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 */
(function (global, factory) {
  factory(global);
}('undefined' !== typeof window ? window : this, function(window) {
  "use strict";

  // Set up logging references that we frequently use.
  var document = window.document,
      console = window.console,
      log = console.log.bind(console),
      info = console.info.bind(console),
      warn = console.warn.bind(console),
      error = console.error.bind(console);

  log("Initializing DVT.");

  // Find the <script> element used to load this script.
  var dvtElement = function() {
    /*
     * Modern browsers set a 'currentScript' attribute to the script element
     * of the running script, so we check that first. If that fails we
     * fall back to searching the document for the <script> tag, identified
     * by the 'divolte' id.
     */
    var document = window.document,
        myElement = document['currentScript'];
    if ('undefined' === typeof myElement) {
      myElement = document.getElementById("divolte");
      if (null == myElement ||
          'script' !== myElement.tagName.toLowerCase()) {
        myElement = undefined;
      }
    }
    if ('undefined' === typeof myElement ||
        'undefined' === typeof myElement.id ||
        'divolte' !== myElement.id) {
      throw "DVT not initialized correctly; script element missing id='divolte'.";
    }
    return myElement;
  }();

  // Detect the base URL for the Divolte server that served this file.
  var baseURL = function(element) {
    var myUrl = element.src;
    return myUrl.substr(0, 1 + myUrl.lastIndexOf('/'));
  }(dvtElement);
  info("Divolte base URL detected", baseURL);

  // Some utilities for working with cookies.
  var /*hasCookie = function(name) {
   // Assumes cookie name is sensible.
   return new RegExp("(?:^|;\\s*)" + name + "\\s*\\=").test(document.cookie);
   },*/
      getCookie = function(name) {
        // Assumes cookie name and value are sensible.
        return document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + name + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1") || null;
      };

  // A server-side pageview is placed as the anchor of the Divolte script.
  var getServerPageView = function(element) {
    var myUrl = element.src,
        anchorIndex = myUrl.indexOf("#"),
        anchor = -1 !== anchorIndex ? myUrl.substring(anchorIndex + 1) : undefined;
    if ('undefined' !== typeof anchor && -1 !== anchor.indexOf('/')) {
      throw "DVT not initialized correctly; page view ID may not contain a slash ('/').";
    }
    return anchor;
  };

  // A function for generating a unique identifier, optionally prefixed with a timestamp.
  var generateId = function() {
    /*
     * A unique identifier is either:
     *  - Some random data; or
     *  - A hash of:
     *     1) The time;
     *     2) Some features specific to the current browser;
     *     3) Rubbish random values from Math.random().
     *
     * The reason for this complication is that producing globally unique values from
     * within a browser is non-trivial.
     */

    // Detect crypto extensions for generating random data.
    var crypto = window['crypto'] || window['msCrypto'],
        getRandomValues = ('undefined' !== typeof crypto) ? crypto['getRandomValues'] : undefined,
        isKnownRandom = ('undefined' !== typeof getRandomValues),
        genRandom;
    if (isKnownRandom) {
      getRandomValues = getRandomValues.bind(crypto);
      genRandom = function(length) {
        // We have Crypto extensions. Use them directly.
        var array = new Uint8Array(length);
        getRandomValues(array);
        return array;
      }
    } else {
      genRandom = function() {
        // We have to fall back on hash-based randomness.
        throw "Not yet supported without Crypto extensions.";
      }
    }

    // Digits we use for encoding. Length is 64 to allow encoding 6 bits.
    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxzy0123456789~_',
    // The maximum number of bytes that can be trivially generated by our hash-based
    // fall-back.
        identifierLength = 32,
        generateDigits = function(now) {
          var randomData = genRandom(identifierLength, now);
          var id = "";
          for (var i = 0; i < identifierLength; ++i) {
            id += digits[randomData[i] & 0x3f];
          }
          return id;
        };

    return function(includeTimestampPrefix) {
      var now = Date.now(),
          digits = generateDigits(now);
      return includeTimestampPrefix ? (now.toString(36) + ':' + digits) : digits;
    };
  }();

  // Locate our identifiers, or generate them if necessary.
  var partyId    = getCookie("_dvp"),
      sessionId  = getCookie("_dvs"),
      pageViewId = getServerPageView(dvtElement),
      isNewParty = !partyId,
      isFirstInSession = !sessionId,
      isServerPageView = Boolean(pageViewId);
  if (isNewParty) {
    log("New party; generating identifier.");
    partyId = generateId(false);
  }
  if (isFirstInSession) {
    log("New session; generating identifier.");
    sessionId = generateId(true);
  }
  if (isServerPageView) {
    log("Using server-provided pageview identifier.")
  } else {
    pageViewId = generateId(false)
  }

  info("Divolte party/session/pageview identifiers", [partyId, sessionId, pageViewId]);

  // Declare the namespace our module will export, with some basic content.
  var dvt = {
    'partyId':          partyId,
    'sessionId':        sessionId,
    'pageViewId':       pageViewId,
    'isNewPartyId':     isNewParty,
    'isFirstInSession': isFirstInSession,
    'isServerPageView': isServerPageView
  };

  // A function for generating an event ID. Each time we invoke this, it will
  // return a new identifier.
  var generateEventId = function() {
    // These don't have to be globally unique. So we can leverage the pageview
    // id with a simple counter.
    var counter = 0;
    return function() {
      var thisEventCounter = counter++;
      return pageViewId + thisEventCounter.toString(16);
    }
  }();

  /**
   * Event logger.
   *
   * Invoking this method will cause an event to be logged with the Divolte
   * server. This function returns immediately, the event itself is logged
   * asynchronously.
   *
   * @param {!string} type The type of event to log.
   * @param {object=} [customParameters] Optional object containing custom parameters to log alongside the event.
   *
   * @return {string} the unique event identifier for this event.
   */
  var signal = function(type, customParameters) {
    // Only proceed if we have an event type.
    var eventId;
    if (type) {
      eventId = generateEventId();
      if ('undefined' === typeof customParameters) {
        info("Signalling event: " + type, eventId);
      } else {
        info("Signalling event: " + type, eventId, customParameters);
      }
      var documentElement = document.documentElement,
          bodyElement = document.getElementsByName('body')[0],
          event = {
            // Note: numbers will be automatically base-36 encoded.
            'p': partyId,
            's': sessionId,
            'v': pageViewId,
            'e': eventId,
            'c': Date.now(),
            'n': isNewParty ? 't' : 'f',
            'f': isFirstInSession ? 't' : 'f',
            'l': window.location.href,
            'r': document.referrer,
            'i': window.screen.availWidth,
            'j': window.screen.availHeight,
            'w': window.innerWidth || documentElement.clientWidth || bodyElement.clientWidth,
            'h': window.innerHeight || documentElement.clientHeight || bodyElement.clientHeight,
            't': type
          };

      // We don't need anything special for cache-busting; the event ID ensures that each
      // request is for a new and unique URL.

      var params = "",
          addParam = function(name,value) {
            if (params.length > 0) {
              params += '&';
            }
            // Value can safely contain '&' and '=' without any problems.
            params += name + '=' + encodeURIComponent(value);
          };

      // These are the parameters relating to the event itself.
      for (var name in event) {
        if (event.hasOwnProperty(name)) {
          var value = event[name];
          switch (typeof value) {
            case 'undefined':
              // No value available. Omit parameter entirely.
              break;
            case 'number':
              // Base 36 encoding for numbers.
              addParam(name, value.toString(36));
              break;
            default:
              addParam(name, value);
          }
        }
      }
      // These are the custom parameters that may have been supplied.
      switch (typeof customParameters) {
        case 'undefined':
          // No custom parameters were supplied.
          break;
        case 'object':
          for (var customName in customParameters) {
            if (customParameters.hasOwnProperty(customName)) {
              var customParameter = customParameters[customName];
              switch (typeof customParameter) {
                case 'string':
                case 'number':
                case 'boolean':
                  addParam('t.' + customName, customParameter);
              }
            }
          }
          break;
        default:
          error("Ignoring non-object custom event parameters", customParameters);
      }

      // The next request is no longer the first for the session.
      isFirstInSession = false;

      var image = new Image(1,1);
      image.src = baseURL + 'csc-event?' + params;
    } else {
      warn("Ignoring event with no type.");
      eventId = undefined;
    }
    return eventId;
  };
  dvt['signal'] = signal;

  // Expose dvt and $$$ identifiers.
  if (typeof define === "function" && define.amd) {
    define(function() { return dvt; });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = dvt;
  } else {
    window['$$$'] = window['dvt'] = dvt;
  }
  log("Module initialized.", dvt);

  // On load we always signal the 'pageView' event.
  signal('pageView');

  return dvt;
}));
